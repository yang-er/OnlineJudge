@model IEnumerable<(Verdict, DateTimeOffset)>
@{
    ViewData["Title"] = "Statistics";
    ViewData["DisableAjaxRefresh"] = true;
    Contest ctx = ViewBag.Contest;
}

@functions
{
    string loopFor(Contest ctx, Verdict v)
    {
        WriteLiteral("[[0,0],");
        int tot = 0;

        foreach (var (c, t) in Model)
        {
            if (t < ctx.StartTime || t > ctx.EndTime) continue;
            if (c == v) tot++;
            WriteLiteral($"[{(t-ctx.StartTime.Value).TotalMinutes},{tot}],");
        }

        WriteLiteral("]");
        return "";
    }
}

<h2 class="mt-2">Statistics of contest</h2>

<link rel="stylesheet" href="~/static/chart/nv.d3.min.css" type="text/css" />
<script type="text/javascript" src="~/static/chart/d3.min.js"></script>
<script type="text/javascript" src="~/static/chart/nv.d3.min.js"></script>

<div id="graph_submissions">
    <svg style="height: 600px"></svg>
</div>

@if (ctx.GetState() >= ContestState.Started)
{

<script>
    //////////////////////////////////////
    // Submissions over time
    // stacked graph of correct, runtime-error, wrong-answer, compiler-error, timelimit, etc
    // x-axis is contest time
    // y axis is # of submissions

    var submission_stats = [
        {
            key: "correct",
            color: "#01df01",
            values: @loopFor(ctx, Verdict.Accepted)
        },
        {
            key: "wrong-answer",
            color: "red",
            values: @loopFor(ctx, Verdict.WrongAnswer)
        },
        {
            key: "time-limit",
            color: "orange",
            values: @loopFor(ctx, Verdict.TimeLimitExceeded)
        },
        {
            key: "run-error",
            color: "#ff3399",
            values: @loopFor(ctx, Verdict.RuntimeError)
        },
        {
            key: "memory-limit",
            color: "purple",
            values: @loopFor(ctx, Verdict.MemoryLimitExceeded)
        },
        {
            key: "compile-error",
            color: "grey",
            values: @loopFor(ctx, Verdict.CompileError)
        },
    ];
    nv.addGraph(function () {
        var chart = nv.models.stackedAreaChart()
            // .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
            // .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
            // .transitionDuration(350)  //how fast do you want the lines to transition?
            // .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
            .showControls(false)
            .x(function (d) { return d[0] })   //We can modify the data accessor functions...
            .y(function (d) { return d[1] })   //...in case your data is formatted differently.
            .showYAxis(true)        //Show the y-axis
            .showXAxis(true)        //Show the x-axis
            .forceX([0, @((ctx.EndTime - ctx.StartTime).Value.TotalMinutes)])
            .forceY([0, @(Model.Count(t => t.Item2 >= ctx.StartTime && t.Item2 <= ctx.EndTime)*1.125)])
            ;
        chart.xAxis     //Chart x-axis settings
            .axisLabel('Contest Time(minutes)')
            .tickFormat(d3.format('d'));

        chart.yAxis     //Chart y-axis settings
            .axisLabel('Total Submissions')
            .tickFormat(d3.format('d'));

        d3.select('#graph_submissions svg')
            .datum(submission_stats)
            .call(chart);
        nv.utils.windowResize(chart.update);
        return chart;
    });
</script>

}