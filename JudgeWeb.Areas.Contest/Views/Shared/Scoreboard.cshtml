@model FullBoardViewModel
@{
    ViewData["Title"] = "Scoreboard";
    ViewData["RefreshAfter"] = "initializeScoreboard";
    ViewData["DataAjaxClass"] = "mt-3";
    ViewData["RefreshSpan"] = 30;
    bool inajax = ViewData.ContainsKey("InAjax");
    if (inajax) { Layout = null; }
    var fil_aff = (HashSet<int>)ViewData["Filter_affiliations"];
    var fil_cat = (HashSet<int>)ViewData["Filter_categories"];
    var inJury = ViewData.ContainsKey("InJury");
    var affs = Model.Affiliations.Where(a => a.AffiliationId != 0 || inJury);
    var grps = Model.Categories.Where(g => g.IsPublic || inJury);
    var state = Model.Contest.GetState();
    var dateFormat = System.Globalization.CultureInfo.GetCultureInfo(1033);
}

<div class="card">
    <div class="card-header" style="font-family: Roboto, sans-serif; display: flex;">
        <span style="font-weight: bold;">@Model.Contest.Name</span>
        <span style="color: DimGray; margin-left: auto;">
            <if cond="@(state == ContestState.NotScheduled)">
                scheduling
            </if>
            <if cond="@(state == ContestState.ScheduledToStart)">
                <if cond="@(Model.Contest.StartTime.Value.Date > DateTimeOffset.Now)">
                    scheduled to start on @string.Format(dateFormat, "{0:ddd, dd MMM yyyy HH:mm:ss CST}", Model.Contest.StartTime)
                </if>
                <if cond="@(Model.Contest.StartTime.Value.Date < DateTimeOffset.Now)">
                    scheduled to start on @Model.Contest.StartTime?.ToString("HH:mm")
                </if>
            </if>
            <if cond="@(state == ContestState.Started || state == ContestState.Frozen)">
                starts: @Model.Contest.StartTime?.ToString("HH:mm") - ends: @Model.Contest.EndTime?.ToString("HH:mm")
            </if>
            <if cond="@(state == ContestState.Ended)">
                contest over, waiting for results
            </if>
            <if cond="@(state == ContestState.Finalized)">
                final standings
            </if>
        </span>
    </div>
</div>

<if cond="@(state == ContestState.Frozen || state == ContestState.Ended)">
    @{ var freezeLength = (int)(Model.Contest.EndTime - Model.Contest.FreezeTime).Value.TotalMinutes; }
    <div class="alert alert-warning" role="alert" style="font-size: 80%;">
        The @(inJury ? "public" : "") scoreboard was frozen with @freezeLength minutes remaining - solutions
        submitted in the last @freezeLength minutes of the contest are still shown as pending.
    </div>
</if>

@if ((state == ContestState.NotScheduled || state == ContestState.ScheduledToStart) && !inJury)
{
    <br />

    <div class="card-deck">
        @foreach (var grp in Model.Categories)
        {
            <div class="card" style="font-family: Roboto, sans-serif;">
                <div class="card-header">@grp.Name</div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        @foreach (var aff in Model.RankCache.Where(g => g.CategoryId == grp.CategoryId).Select(g => g.Affiliation).Distinct())
                        {
                            <li class="list-group-item">@aff.FormalName</li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="dropdown">
        <button class="btn btn-outline-secondary btn-sm m-2 dropdown-toggle" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false" id="filter-toggle">
            <i class="fas fa-filter"></i>
            Filter
            @(fil_aff is null ? "" : "(affiliations)")
            @(fil_cat is null ? "" : "(categories)")
        </button>

        <div class="dropdown-menu" aria-labelledby="filter-toggle">
            <form asp-action="Scoreboard" method="get">
                <div class="m-2 p-2 form-inline">
                    <select class="form-control mr-2" multiple size="8" name="affiliations[]">
                        @foreach (var aff in affs)
                        {
                            <option issel="@(fil_aff?.Contains(aff.AffiliationId) ?? false)" value="@aff.AffiliationId">@aff.FormalName</option>
                        }
                    </select>
                    <select class="form-control mr-2" multiple size="8" name="categories[]">
                        @foreach (var grp in grps)
                        {
                            <option issel="@(fil_cat?.Contains(grp.CategoryId) ?? false)" value="@grp.CategoryId">@grp.Name</option>
                        }
                    </select>
                    <input type="submit" class="btn btn-primary btn-sm align-top" name="filter" value="filter" />
                    <a class="btn btn-secondary btn-sm align-top" asp-action="Scoreboard">clear</a>
                </div>
            </form>
        </div>
    </div>

    <scoreboard model="Model" use-footer="true" in-jury="@(ViewData.ContainsKey("InJury"))" />
}

<p id="lastmod">
    Last Update: @string.Format(dateFormat, "{0:ddd, dd MMM yyyy HH:mm:ss CST}", Model.UpdateTime)<br />
    using <a href="https://www.domjudge.org/" rel="nofollow" target="_top">DOMjudge</a> judgehost and theme
</p>

@if (!inajax)
{
    @section Scripts {
        <script>
            initFavouriteTeams();

            var scoreboardUrl = '@Html.Raw(ViewData["RefreshUrl"])';

            $(function () {
                window.initializeScoreboard = function () {
                    var $newProgress = $('[data-ajax-refresh-target] > .d-none > [data-progress-bar]');
                    if ($newProgress.length) {
                        var $oldProgress = $('body > [data-progress-bar]');
                        $oldProgress.html($newProgress.children());
                        $newProgress.parent().remove();
                    }

                    initFavouriteTeams();
                };
            });
        </script>
    }
}
